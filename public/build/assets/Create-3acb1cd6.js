import { P as w, u as C, g as u, a as l, w as p, o as f, d as r, t as d, b as t, F as $, E as x, e as _, n as V, f as j, j as B, D as E } from "./app-c09dbc28.js"; import { _ as m, a as F, b as h } from "./TextInput-8d2ea274.js"; import { _ as D, a as N } from "./SecondaryButton-0c8c8394.js"; import { _ as U } from "./PrimaryButton-ebdc7910.js"; import { _ as M } from "./Checkbox-4fc2736b.js"; const q = { class: "space-y-6" }, z = ["onSubmit"], A = { class: "text-lg font-medium text-gray-900 dark:text-gray-100" }, L = { class: "my-6 space-y-4" }, O = { class: "flex justify-start items-center space-x-2 mt-2" }, P = { class: "grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 mt-2" }, T = ["id", "value"], G = { class: "flex justify-end" }, R = { __name: "Create", props: { show: Boolean, title: String, permissions: Object }, emits: ["close"], setup(v, { emit: c }) { const i = v, n = w({ multipleSelect: !1 }), e = C({ name: "", guard_name: "web", permissions: [] }), g = () => { e.post(route("role.store"), { preserveScroll: !0, onSuccess: () => { c("close"), e.reset(), n.multipleSelect = !1 }, onError: () => null, onFinish: () => null }) }, b = a => { a.target.checked === !1 ? e.permissions = [] : (e.permissions = [], i.permissions.forEach(s => { e.permissions.push(s.id) })) }, y = () => { i.permissions.length == e.permissions.length ? n.multipleSelect = !0 : n.multipleSelect = !1 }; return (a, s) => (f(), u("section", q, [l(D, { show: i.show, onClose: s[4] || (s[4] = o => c("close")) }, { default: p(() => [r("form", { class: "p-6", onSubmit: j(g, ["prevent"]) }, [r("h2", A, d(a.lang().label.add) + " " + d(i.title), 1), r("div", L, [r("div", null, [l(m, { for: "name", value: a.lang().label.role }, null, 8, ["value"]), l(F, { id: "name", type: "text", class: "mt-1 block w-full", modelValue: t(e).name, "onUpdate:modelValue": s[0] || (s[0] = o => t(e).name = o), required: "", placeholder: a.lang().placeholder.name }, null, 8, ["modelValue", "placeholder"]), l(h, { class: "mt-2", message: t(e).errors.name }, null, 8, ["message"])]), r("div", null, [l(m, { value: a.lang().label.permission }, null, 8, ["value"]), l(h, { class: "mt-2", message: t(e).errors.permissions }, null, 8, ["message"]), r("div", O, [l(M, { id: "permission-all", checked: n.multipleSelect, "onUpdate:checked": s[1] || (s[1] = o => n.multipleSelect = o), onChange: b }, null, 8, ["checked"]), l(m, { for: "permission-all", value: a.lang().label.check_all }, null, 8, ["value"])]), r("div", P, [(f(!0), u($, null, x(i.permissions, (o, k) => (f(), u("div", { class: "flex items-center justify-start space-x-2", key: k }, [B(r("input", { onChange: y, class: "rounded dark:bg-gray-900 border-gray-300 dark:border-gray-700 text-primary dark:text-primary shadow-sm focus:ring-primary/80 dark:focus:ring-primary dark:focus:ring-offset-gray-800 dark:checked:bg-primary dark:checked:border-primary", type: "checkbox", id: "permission_" + o.id, value: o.id, "onUpdate:modelValue": s[2] || (s[2] = S => t(e).permissions = S) }, null, 40, T), [[E, t(e).permissions]]), l(m, { for: "permission_" + o.id, value: o.name }, null, 8, ["for", "value"])]))), 128))])])]), r("div", G, [l(N, { disabled: t(e).processing, onClick: s[3] || (s[3] = o => c("close")) }, { default: p(() => [_(d(a.lang().button.close), 1)]), _: 1 }, 8, ["disabled"]), l(U, { class: V(["ml-3", { "opacity-25": t(e).processing }]), disabled: t(e).processing, onClick: g }, { default: p(() => [_(d(t(e).processing ? a.lang().button.add + "..." : a.lang().button.add), 1)]), _: 1 }, 8, ["class", "disabled"])])], 40, z)]), _: 1 }, 8, ["show"])])) } }; export { R as default };
